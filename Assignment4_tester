//version 0.5.5
import java.util.*;
public class Test {
    public static void main(String[] args) {
        //runAllTests();    //Runs all the tests
        //testPartA();
        //testPartB();
        //testQ1E1();       //Runs tests for 1.1
        //testQ1E2();       //Runs tests for 1.2
        //testQ2E1a();      //Runs tests for 2.2 addFirst
        //testQ2E1b();      //Runs tests for 2.2 addLast
        //testQ2E1c();      //Runs tests for 2.2 removeFirst
        //testQ2E1d();      //Runs tests for 2.2 removeLast
        //testQ2E3();       //Runs tests for 2.3
        //testQ2E4();       //Runs tests for 2.4
        //testQ2E5a();      //Runs tests for 2.5 isReduced
        //testQ2E5b();      //Runs tests for 2.5 reduce
        //testQ2E6();       //Runs tests for 2.6
        //testQ2E7a();      //Runs tests for 2.7 shiftRight
        //testQ2E7b();      //Runs tests for 2.7 shiftLeft
    }

    private static void runAllTests() {
        testPartA();
        testPartB();
    }

    private static void testPartA() {
        testQ1E1();
        testQ1E2();
    }

    private static void testPartB() {
        testQ2E2a();
        testQ2E2b();
        testQ2E2c();
        testQ2E2d();
        testQ2E3();
        testQ2E4();
        testQ2E5a();
        testQ2E5b();
        testQ2E6();
        testQ2E7a();
        testQ2E7b();
    }

    private static void testQ1E1() {
        boolean passed = true;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            output = Bit.fullAdderSum(inputs[i][0], inputs[i][1], inputs[i][2]);
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ1E2() {
        boolean passed = true;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            output = Bit.fullAdderCarry(inputs[i][0], inputs[i][1], inputs[i][2]);
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2a() {
        boolean passed = true;
        BitList output;
        Bit[][] inputs = {{},
                {null},
                {Bit.ZERO, null, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<>", "java.lang.IllegalArgumentException", "java.lang.IllegalArgumentException", "<000>", "<001>", "<010>", "<011>", "<100>", "<101>", "<110>", "<111>"};
        for (int i = 0; i < inputs.length; i++) {
            try {
                output = new BitList();
                for (Bit element : inputs[i])
                    output.addFirst(element);
                if (!output.toString().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
                }
            } catch (Exception e) {
                if (!e.getClass().getCanonicalName().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + e.getClass().getCanonicalName());
                }
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2b() {
        boolean passed = true;
        BitList output;
        Bit[][] inputs = {{},
                {null},
                {Bit.ZERO, null, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<>", "java.lang.IllegalArgumentException", "java.lang.IllegalArgumentException", "<000>", "<100>", "<010>", "<110>", "<001>", "<101>", "<011>", "<111>"};
        for (int i = 0; i < inputs.length; i++) {
            try {
                output = new BitList();
                for (Bit element : inputs[i])
                    output.addLast(element);
                if (!output.toString().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
                }
            } catch (Exception e) {
                if (!e.getClass().getCanonicalName().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + e.getClass().getCanonicalName());
                }
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2c() {
        boolean passed = true;
        BitList bitList;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ONE, Bit.ZERO, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element : inputs[i])
                bitList.addFirst(element);
            output = bitList.removeFirst();
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E2d() {
        boolean passed = true;
        BitList bitList;
        Bit output;
        Bit[][] inputs = {{Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE}};
        Bit[] expectedOutputs = {Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element : inputs[i])
                bitList.addFirst(element);
            output = bitList.removeLast();
            if (!output.equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E3() {
        boolean passed = true;
        BitList bitList, output;
        Bit[][] inputs = {null,
                {},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ZERO},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"java.lang.IllegalArgumentException", "<>", "<000>", "<001>", "<010>", "<011>", "<100>", "<101>", "<110>", "<111>"};
        for (int i = 0; i < inputs.length; i++) {
            try {
                if (inputs[i] != null) {
                    bitList = new BitList();
                    for (Bit element : inputs[i])
                        bitList.addFirst(element);
                } else
                    bitList = null;
                output = new BitList(bitList);
                if (!output.toString().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
                }
                output.addFirst(Bit.ZERO);
                if (output.equals(bitList)) {
                    passed = false;
                    System.out.println("Failed: Copy isn't a deep copy");
                }
            } catch (Exception e) {
                if (!e.getClass().getCanonicalName().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + e.getClass().getCanonicalName());
                }
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E4() {
        boolean passed = true;
        BitList bitList;
        boolean output;
        Bit[][] inputs = {{},
                {Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO}};
        boolean[] expectedOutputs = {false, true, true, false, true, true};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element : inputs[i])
                bitList.addFirst(element);
            output = bitList.isNumber();
            if (output != expectedOutputs[i]) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E5a() {
        boolean passed = true;
        BitList bitList;
        boolean output;
        Bit[][] inputs = {{},
                {Bit.ONE},
                {Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE}};
        boolean[] expectedOutputs = {false, false, true, true, false, true, true, false, true, false, false, false};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element : inputs[i])
                bitList.addFirst(element);
            output = bitList.isReduced();
            if (output != expectedOutputs[i]) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E5b() {
        boolean passed = true;
        BitList output;
        Bit[][] inputs = {{},
                {Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"java.lang.IllegalArgumentException", "<0>", "<01>", "java.lang.IllegalArgumentException", "<101>", "<110>", "<11>", "<101100>", "<0>", "<11000>", "<0111>"};
        for (int i = 0; i < inputs.length; i++) {
            try {
                output = new BitList();
                for (Bit element : inputs[i])
                    output.addFirst(element);
                output.reduce();
                if (!output.toString().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
                }
            } catch (Exception e) {
                if (!e.getClass().getCanonicalName().equals(expectedOutputs[i])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + e.getClass().getCanonicalName());
                }
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E6() {
        boolean passed = true;
        BitList bitList, output;
        Bit[][] inputs = {{},
                {Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<>", "<1>", "<10>", "<01>", "<010>", "<001>", "<000000>", "<010011>", "<1111111>", "<000111>", "<111000>"};
        for (int i = 0; i < inputs.length; i++) {
            bitList = new BitList();
            for (Bit element : inputs[i])
                bitList.addFirst(element);
            output = bitList.complement();
            if (!output.toString().equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }


    private static void testQ2E7a() {
        boolean passed = true;
        BitList output;
        Bit shift;
        Bit[][] inputs = {{},
                {Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<>", "<>", "<>", "<>", "<>", "<>", "<111>", "<101>", "<0000>", "<111>", "<000>"};
        Bit[][] expectedShifts = {{null, null, null},
                {Bit.ZERO, null, null},
                {Bit.ONE, Bit.ZERO, null},
                {Bit.ZERO, Bit.ONE, null},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ONE},
                {Bit.ZERO, Bit.ZERO, Bit.ONE},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE}};
        for (int i = 0; i < inputs.length; i++) {
            output = new BitList();
            for (Bit element : inputs[i])
                output.addFirst(element);
            for (int j = 0; j < 3; j++) {
                shift = output.shiftRight();
                if (shift == null) {
                    if (expectedShifts[i][j] != null) {
                        passed = false;
                        System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                        System.out.println("Expected return at rightShift number " + (j + 1) + ": " + expectedShifts[i][j] + " But output was: " + shift);
                    }
                } else if (!shift.equals(expectedShifts[i][j])) {
                    passed = false;
                    System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                    System.out.println("Expected return at rightShift number " + (j + 1) + ": " + expectedShifts[i][j] + " But output was: " + shift);
                }
            }
            if (!output.toString().equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output after 3 right shifts: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }

    private static void testQ2E7b() {
        boolean passed = true;
        BitList output;
        Bit[][] inputs = {{},
                {Bit.ZERO},
                {Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ZERO, Bit.ONE},
                {Bit.ONE, Bit.ONE, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE, Bit.ONE},
                {Bit.ONE, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ONE, Bit.ONE, Bit.ONE, Bit.ZERO, Bit.ZERO, Bit.ZERO},
                {Bit.ZERO, Bit.ZERO, Bit.ZERO, Bit.ONE, Bit.ONE, Bit.ONE}};
        String[] expectedOutputs = {"<000>", "<0000>", "<01000>", "<10000>", "<101000>", "<110000>", "<111111000>", "<101100000>", "<0000000000>", "<111000000>", "<000111000>"};
        for (int i = 0; i < inputs.length; i++) {
            output = new BitList();
            for (Bit element : inputs[i])
                output.addFirst(element);
            output.shiftLeft();
            output.shiftLeft();
            output.shiftLeft();
            if (!output.toString().equals(expectedOutputs[i])) {
                passed = false;
                System.out.println("Failed on input: " + Arrays.toString(inputs[i]));
                System.out.println("Expected output after 3 left shifts: " + expectedOutputs[i] + " But output was: " + output);
            }
        }
        if (passed)
            System.out.println("Passed all tests");
    }
}
